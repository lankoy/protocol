// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v4.25.1
// source: office/office.proto

package office

import (
	sdkws "github.com/openimsdk/protocol/sdkws"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommonResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ErrCode       int32                  `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode"`
	ErrMsg        string                 `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommonResp) Reset() {
	*x = CommonResp{}
	mi := &file_office_office_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommonResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonResp) ProtoMessage() {}

func (x *CommonResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonResp.ProtoReflect.Descriptor instead.
func (*CommonResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{0}
}

func (x *CommonResp) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *CommonResp) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

type TagUser struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	UserName      string                 `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TagUser) Reset() {
	*x = TagUser{}
	mi := &file_office_office_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagUser) ProtoMessage() {}

func (x *TagUser) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagUser.ProtoReflect.Descriptor instead.
func (*TagUser) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{1}
}

func (x *TagUser) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *TagUser) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type Tag struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TagID         string                 `protobuf:"bytes,1,opt,name=tagID,proto3" json:"tagID"`
	TagName       string                 `protobuf:"bytes,2,opt,name=tagName,proto3" json:"tagName"`
	UserList      []*TagUser             `protobuf:"bytes,3,rep,name=userList,proto3" json:"userList"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tag) Reset() {
	*x = Tag{}
	mi := &file_office_office_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{2}
}

func (x *Tag) GetTagID() string {
	if x != nil {
		return x.TagID
	}
	return ""
}

func (x *Tag) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *Tag) GetUserList() []*TagUser {
	if x != nil {
		return x.UserList
	}
	return nil
}

type GetUserTagsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	OperationID   string                 `protobuf:"bytes,2,opt,name=operationID,proto3" json:"operationID"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserTagsReq) Reset() {
	*x = GetUserTagsReq{}
	mi := &file_office_office_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserTagsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserTagsReq) ProtoMessage() {}

func (x *GetUserTagsReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserTagsReq.ProtoReflect.Descriptor instead.
func (*GetUserTagsReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{3}
}

func (x *GetUserTagsReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetUserTagsReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type GetUserTagsResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommonResp    *CommonResp            `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	Tags          []*Tag                 `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserTagsResp) Reset() {
	*x = GetUserTagsResp{}
	mi := &file_office_office_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserTagsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserTagsResp) ProtoMessage() {}

func (x *GetUserTagsResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserTagsResp.ProtoReflect.Descriptor instead.
func (*GetUserTagsResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{4}
}

func (x *GetUserTagsResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetUserTagsResp) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CreateTagReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TagName       string                 `protobuf:"bytes,1,opt,name=tagName,proto3" json:"tagName"`
	UserID        string                 `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID"`
	UserIDList    []string               `protobuf:"bytes,3,rep,name=userIDList,proto3" json:"userIDList"`
	OperationID   string                 `protobuf:"bytes,4,opt,name=operationID,proto3" json:"operationID"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTagReq) Reset() {
	*x = CreateTagReq{}
	mi := &file_office_office_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTagReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTagReq) ProtoMessage() {}

func (x *CreateTagReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTagReq.ProtoReflect.Descriptor instead.
func (*CreateTagReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{5}
}

func (x *CreateTagReq) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *CreateTagReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CreateTagReq) GetUserIDList() []string {
	if x != nil {
		return x.UserIDList
	}
	return nil
}

func (x *CreateTagReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type CreateTagResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommonResp    *CommonResp            `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTagResp) Reset() {
	*x = CreateTagResp{}
	mi := &file_office_office_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTagResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTagResp) ProtoMessage() {}

func (x *CreateTagResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTagResp.ProtoReflect.Descriptor instead.
func (*CreateTagResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{6}
}

func (x *CreateTagResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type DeleteTagReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	TagID         string                 `protobuf:"bytes,2,opt,name=tagID,proto3" json:"tagID"`
	OperationID   string                 `protobuf:"bytes,3,opt,name=operationID,proto3" json:"operationID"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTagReq) Reset() {
	*x = DeleteTagReq{}
	mi := &file_office_office_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTagReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagReq) ProtoMessage() {}

func (x *DeleteTagReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagReq.ProtoReflect.Descriptor instead.
func (*DeleteTagReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteTagReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *DeleteTagReq) GetTagID() string {
	if x != nil {
		return x.TagID
	}
	return ""
}

func (x *DeleteTagReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type DeleteTagResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommonResp    *CommonResp            `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTagResp) Reset() {
	*x = DeleteTagResp{}
	mi := &file_office_office_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTagResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagResp) ProtoMessage() {}

func (x *DeleteTagResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagResp.ProtoReflect.Descriptor instead.
func (*DeleteTagResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteTagResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type SetTagReq struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	UserID             string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	TagID              string                 `protobuf:"bytes,2,opt,name=tagID,proto3" json:"tagID"`
	NewName            string                 `protobuf:"bytes,3,opt,name=newName,proto3" json:"newName"`
	IncreaseUserIDList []string               `protobuf:"bytes,4,rep,name=increaseUserIDList,proto3" json:"increaseUserIDList"`
	ReduceUserIDList   []string               `protobuf:"bytes,5,rep,name=reduceUserIDList,proto3" json:"reduceUserIDList"`
	OperationID        string                 `protobuf:"bytes,6,opt,name=operationID,proto3" json:"operationID"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SetTagReq) Reset() {
	*x = SetTagReq{}
	mi := &file_office_office_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTagReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTagReq) ProtoMessage() {}

func (x *SetTagReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTagReq.ProtoReflect.Descriptor instead.
func (*SetTagReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{9}
}

func (x *SetTagReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *SetTagReq) GetTagID() string {
	if x != nil {
		return x.TagID
	}
	return ""
}

func (x *SetTagReq) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

func (x *SetTagReq) GetIncreaseUserIDList() []string {
	if x != nil {
		return x.IncreaseUserIDList
	}
	return nil
}

func (x *SetTagReq) GetReduceUserIDList() []string {
	if x != nil {
		return x.ReduceUserIDList
	}
	return nil
}

func (x *SetTagReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type SetTagResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommonResp    *CommonResp            `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetTagResp) Reset() {
	*x = SetTagResp{}
	mi := &file_office_office_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTagResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTagResp) ProtoMessage() {}

func (x *SetTagResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTagResp.ProtoReflect.Descriptor instead.
func (*SetTagResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{10}
}

func (x *SetTagResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type SendMsg2TagReq struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TagList          []string               `protobuf:"bytes,1,rep,name=tagList,proto3" json:"tagList"`
	UserList         []string               `protobuf:"bytes,2,rep,name=UserList,proto3" json:"UserList"`
	GroupList        []string               `protobuf:"bytes,3,rep,name=GroupList,proto3" json:"GroupList"`
	SendID           string                 `protobuf:"bytes,4,opt,name=sendID,proto3" json:"sendID"`
	SenderPlatformID int32                  `protobuf:"varint,5,opt,name=senderPlatformID,proto3" json:"senderPlatformID"`
	Content          string                 `protobuf:"bytes,6,opt,name=content,proto3" json:"content"`
	OperationID      string                 `protobuf:"bytes,7,opt,name=operationID,proto3" json:"operationID"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SendMsg2TagReq) Reset() {
	*x = SendMsg2TagReq{}
	mi := &file_office_office_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMsg2TagReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMsg2TagReq) ProtoMessage() {}

func (x *SendMsg2TagReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMsg2TagReq.ProtoReflect.Descriptor instead.
func (*SendMsg2TagReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{11}
}

func (x *SendMsg2TagReq) GetTagList() []string {
	if x != nil {
		return x.TagList
	}
	return nil
}

func (x *SendMsg2TagReq) GetUserList() []string {
	if x != nil {
		return x.UserList
	}
	return nil
}

func (x *SendMsg2TagReq) GetGroupList() []string {
	if x != nil {
		return x.GroupList
	}
	return nil
}

func (x *SendMsg2TagReq) GetSendID() string {
	if x != nil {
		return x.SendID
	}
	return ""
}

func (x *SendMsg2TagReq) GetSenderPlatformID() int32 {
	if x != nil {
		return x.SenderPlatformID
	}
	return 0
}

func (x *SendMsg2TagReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SendMsg2TagReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type SendMsg2TagResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommonResp    *CommonResp            `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendMsg2TagResp) Reset() {
	*x = SendMsg2TagResp{}
	mi := &file_office_office_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMsg2TagResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMsg2TagResp) ProtoMessage() {}

func (x *SendMsg2TagResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMsg2TagResp.ProtoReflect.Descriptor instead.
func (*SendMsg2TagResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{12}
}

func (x *SendMsg2TagResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type GetTagSendLogsReq struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Pagination    *sdkws.RequestPagination `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination"`
	UserID        string                   `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID"`
	OperationID   string                   `protobuf:"bytes,3,opt,name=operationID,proto3" json:"operationID"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTagSendLogsReq) Reset() {
	*x = GetTagSendLogsReq{}
	mi := &file_office_office_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTagSendLogsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagSendLogsReq) ProtoMessage() {}

func (x *GetTagSendLogsReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagSendLogsReq.ProtoReflect.Descriptor instead.
func (*GetTagSendLogsReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{13}
}

func (x *GetTagSendLogsReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetTagSendLogsReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetTagSendLogsReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type TagSendLog struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserList      []*TagUser             `protobuf:"bytes,1,rep,name=userList,proto3" json:"userList"`
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content"`
	SendTime      int64                  `protobuf:"varint,3,opt,name=sendTime,proto3" json:"sendTime"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TagSendLog) Reset() {
	*x = TagSendLog{}
	mi := &file_office_office_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagSendLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagSendLog) ProtoMessage() {}

func (x *TagSendLog) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagSendLog.ProtoReflect.Descriptor instead.
func (*TagSendLog) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{14}
}

func (x *TagSendLog) GetUserList() []*TagUser {
	if x != nil {
		return x.UserList
	}
	return nil
}

func (x *TagSendLog) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *TagSendLog) GetSendTime() int64 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

type GetTagSendLogsResp struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	CommonResp    *CommonResp               `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	Pagination    *sdkws.ResponsePagination `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination"`
	TagSendLogs   []*TagSendLog             `protobuf:"bytes,3,rep,name=tagSendLogs,proto3" json:"tagSendLogs"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTagSendLogsResp) Reset() {
	*x = GetTagSendLogsResp{}
	mi := &file_office_office_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTagSendLogsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagSendLogsResp) ProtoMessage() {}

func (x *GetTagSendLogsResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagSendLogsResp.ProtoReflect.Descriptor instead.
func (*GetTagSendLogsResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{15}
}

func (x *GetTagSendLogsResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetTagSendLogsResp) GetPagination() *sdkws.ResponsePagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetTagSendLogsResp) GetTagSendLogs() []*TagSendLog {
	if x != nil {
		return x.TagSendLogs
	}
	return nil
}

type GetUserTagByIDReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	TagID         string                 `protobuf:"bytes,2,opt,name=tagID,proto3" json:"tagID"`
	OperationID   string                 `protobuf:"bytes,3,opt,name=operationID,proto3" json:"operationID"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserTagByIDReq) Reset() {
	*x = GetUserTagByIDReq{}
	mi := &file_office_office_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserTagByIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserTagByIDReq) ProtoMessage() {}

func (x *GetUserTagByIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserTagByIDReq.ProtoReflect.Descriptor instead.
func (*GetUserTagByIDReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{16}
}

func (x *GetUserTagByIDReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetUserTagByIDReq) GetTagID() string {
	if x != nil {
		return x.TagID
	}
	return ""
}

func (x *GetUserTagByIDReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type GetUserTagByIDResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommonResp    *CommonResp            `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	Tag           *Tag                   `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserTagByIDResp) Reset() {
	*x = GetUserTagByIDResp{}
	mi := &file_office_office_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserTagByIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserTagByIDResp) ProtoMessage() {}

func (x *GetUserTagByIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserTagByIDResp.ProtoReflect.Descriptor instead.
func (*GetUserTagByIDResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{17}
}

func (x *GetUserTagByIDResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetUserTagByIDResp) GetTag() *Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

type LikeUser struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	UserName      string                 `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LikeUser) Reset() {
	*x = LikeUser{}
	mi := &file_office_office_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LikeUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeUser) ProtoMessage() {}

func (x *LikeUser) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeUser.ProtoReflect.Descriptor instead.
func (*LikeUser) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{18}
}

func (x *LikeUser) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *LikeUser) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type NotificationUser struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	UserName      string                 `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotificationUser) Reset() {
	*x = NotificationUser{}
	mi := &file_office_office_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotificationUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationUser) ProtoMessage() {}

func (x *NotificationUser) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationUser.ProtoReflect.Descriptor instead.
func (*NotificationUser) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{19}
}

func (x *NotificationUser) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *NotificationUser) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type Comment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	UserName      string                 `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName"`
	FaceURL       string                 `protobuf:"bytes,3,opt,name=faceURL,proto3" json:"faceURL"`
	ReplyUserID   string                 `protobuf:"bytes,4,opt,name=replyUserID,proto3" json:"replyUserID"`
	ReplyUserName string                 `protobuf:"bytes,5,opt,name=replyUserName,proto3" json:"replyUserName"`
	ContentID     string                 `protobuf:"bytes,6,opt,name=contentID,proto3" json:"contentID"`
	Content       string                 `protobuf:"bytes,7,opt,name=content,proto3" json:"content"`
	CreateTime    int32                  `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Comment) Reset() {
	*x = Comment{}
	mi := &file_office_office_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{20}
}

func (x *Comment) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Comment) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *Comment) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *Comment) GetReplyUserID() string {
	if x != nil {
		return x.ReplyUserID
	}
	return ""
}

func (x *Comment) GetReplyUserName() string {
	if x != nil {
		return x.ReplyUserName
	}
	return ""
}

func (x *Comment) GetContentID() string {
	if x != nil {
		return x.ContentID
	}
	return ""
}

func (x *Comment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Comment) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type PermissionGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupName     string                 `protobuf:"bytes,1,opt,name=groupName,proto3" json:"groupName"`
	GroupID       string                 `protobuf:"bytes,2,opt,name=groupID,proto3" json:"groupID"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PermissionGroup) Reset() {
	*x = PermissionGroup{}
	mi := &file_office_office_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PermissionGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionGroup) ProtoMessage() {}

func (x *PermissionGroup) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionGroup.ProtoReflect.Descriptor instead.
func (*PermissionGroup) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{21}
}

func (x *PermissionGroup) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *PermissionGroup) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

type WorkMomentUser struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	UserName      string                 `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkMomentUser) Reset() {
	*x = WorkMomentUser{}
	mi := &file_office_office_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkMomentUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkMomentUser) ProtoMessage() {}

func (x *WorkMomentUser) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkMomentUser.ProtoReflect.Descriptor instead.
func (*WorkMomentUser) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{22}
}

func (x *WorkMomentUser) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *WorkMomentUser) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type WorkMoment struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	WorkMomentID        string                 `protobuf:"bytes,1,opt,name=workMomentID,proto3" json:"workMomentID"`
	UserID              string                 `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID"`
	UserName            string                 `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName"`
	FaceURL             string                 `protobuf:"bytes,4,opt,name=faceURL,proto3" json:"faceURL"`
	Content             string                 `protobuf:"bytes,5,opt,name=content,proto3" json:"content"`
	LikeUserList        []*WorkMomentUser      `protobuf:"bytes,6,rep,name=likeUserList,proto3" json:"likeUserList"`
	Comments            []*Comment             `protobuf:"bytes,7,rep,name=comments,proto3" json:"comments"`
	Permission          int32                  `protobuf:"varint,8,opt,name=permission,proto3" json:"permission"`
	PermissionUserList  []*WorkMomentUser      `protobuf:"bytes,9,rep,name=permissionUserList,proto3" json:"permissionUserList"`
	PermissionGroupList []*PermissionGroup     `protobuf:"bytes,10,rep,name=permissionGroupList,proto3" json:"permissionGroupList"`
	AtUserList          []*WorkMomentUser      `protobuf:"bytes,11,rep,name=atUserList,proto3" json:"atUserList"`
	CreateTime          int32                  `protobuf:"varint,12,opt,name=createTime,proto3" json:"createTime"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *WorkMoment) Reset() {
	*x = WorkMoment{}
	mi := &file_office_office_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkMoment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkMoment) ProtoMessage() {}

func (x *WorkMoment) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkMoment.ProtoReflect.Descriptor instead.
func (*WorkMoment) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{23}
}

func (x *WorkMoment) GetWorkMomentID() string {
	if x != nil {
		return x.WorkMomentID
	}
	return ""
}

func (x *WorkMoment) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *WorkMoment) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *WorkMoment) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *WorkMoment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *WorkMoment) GetLikeUserList() []*WorkMomentUser {
	if x != nil {
		return x.LikeUserList
	}
	return nil
}

func (x *WorkMoment) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *WorkMoment) GetPermission() int32 {
	if x != nil {
		return x.Permission
	}
	return 0
}

func (x *WorkMoment) GetPermissionUserList() []*WorkMomentUser {
	if x != nil {
		return x.PermissionUserList
	}
	return nil
}

func (x *WorkMoment) GetPermissionGroupList() []*PermissionGroup {
	if x != nil {
		return x.PermissionGroupList
	}
	return nil
}

func (x *WorkMoment) GetAtUserList() []*WorkMomentUser {
	if x != nil {
		return x.AtUserList
	}
	return nil
}

func (x *WorkMoment) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type CreateOneWorkMomentReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkMoment    *WorkMoment            `protobuf:"bytes,1,opt,name=workMoment,proto3" json:"workMoment"`
	OperationID   string                 `protobuf:"bytes,2,opt,name=operationID,proto3" json:"operationID"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOneWorkMomentReq) Reset() {
	*x = CreateOneWorkMomentReq{}
	mi := &file_office_office_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOneWorkMomentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOneWorkMomentReq) ProtoMessage() {}

func (x *CreateOneWorkMomentReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOneWorkMomentReq.ProtoReflect.Descriptor instead.
func (*CreateOneWorkMomentReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{24}
}

func (x *CreateOneWorkMomentReq) GetWorkMoment() *WorkMoment {
	if x != nil {
		return x.WorkMoment
	}
	return nil
}

func (x *CreateOneWorkMomentReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type CreateOneWorkMomentResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommonResp    *CommonResp            `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOneWorkMomentResp) Reset() {
	*x = CreateOneWorkMomentResp{}
	mi := &file_office_office_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOneWorkMomentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOneWorkMomentResp) ProtoMessage() {}

func (x *CreateOneWorkMomentResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOneWorkMomentResp.ProtoReflect.Descriptor instead.
func (*CreateOneWorkMomentResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{25}
}

func (x *CreateOneWorkMomentResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type DeleteOneWorkMomentReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkMomentID  string                 `protobuf:"bytes,1,opt,name=workMomentID,proto3" json:"workMomentID"`
	UserID        string                 `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID"`
	OperationID   string                 `protobuf:"bytes,3,opt,name=operationID,proto3" json:"operationID"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteOneWorkMomentReq) Reset() {
	*x = DeleteOneWorkMomentReq{}
	mi := &file_office_office_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteOneWorkMomentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOneWorkMomentReq) ProtoMessage() {}

func (x *DeleteOneWorkMomentReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOneWorkMomentReq.ProtoReflect.Descriptor instead.
func (*DeleteOneWorkMomentReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteOneWorkMomentReq) GetWorkMomentID() string {
	if x != nil {
		return x.WorkMomentID
	}
	return ""
}

func (x *DeleteOneWorkMomentReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *DeleteOneWorkMomentReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type DeleteOneWorkMomentResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommonResp    *CommonResp            `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteOneWorkMomentResp) Reset() {
	*x = DeleteOneWorkMomentResp{}
	mi := &file_office_office_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteOneWorkMomentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOneWorkMomentResp) ProtoMessage() {}

func (x *DeleteOneWorkMomentResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOneWorkMomentResp.ProtoReflect.Descriptor instead.
func (*DeleteOneWorkMomentResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteOneWorkMomentResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type LikeOneWorkMomentReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	WorkMomentID  string                 `protobuf:"bytes,2,opt,name=WorkMomentID,proto3" json:"WorkMomentID"`
	OperationID   string                 `protobuf:"bytes,3,opt,name=operationID,proto3" json:"operationID"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LikeOneWorkMomentReq) Reset() {
	*x = LikeOneWorkMomentReq{}
	mi := &file_office_office_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LikeOneWorkMomentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeOneWorkMomentReq) ProtoMessage() {}

func (x *LikeOneWorkMomentReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeOneWorkMomentReq.ProtoReflect.Descriptor instead.
func (*LikeOneWorkMomentReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{28}
}

func (x *LikeOneWorkMomentReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *LikeOneWorkMomentReq) GetWorkMomentID() string {
	if x != nil {
		return x.WorkMomentID
	}
	return ""
}

func (x *LikeOneWorkMomentReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type LikeOneWorkMomentResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommonResp    *CommonResp            `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LikeOneWorkMomentResp) Reset() {
	*x = LikeOneWorkMomentResp{}
	mi := &file_office_office_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LikeOneWorkMomentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeOneWorkMomentResp) ProtoMessage() {}

func (x *LikeOneWorkMomentResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeOneWorkMomentResp.ProtoReflect.Descriptor instead.
func (*LikeOneWorkMomentResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{29}
}

func (x *LikeOneWorkMomentResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type CommentOneWorkMomentReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	WorkMomentID  string                 `protobuf:"bytes,2,opt,name=workMomentID,proto3" json:"workMomentID"`
	ReplyUserID   string                 `protobuf:"bytes,3,opt,name=replyUserID,proto3" json:"replyUserID"`
	Content       string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content"`
	OperationID   string                 `protobuf:"bytes,5,opt,name=operationID,proto3" json:"operationID"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommentOneWorkMomentReq) Reset() {
	*x = CommentOneWorkMomentReq{}
	mi := &file_office_office_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommentOneWorkMomentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentOneWorkMomentReq) ProtoMessage() {}

func (x *CommentOneWorkMomentReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentOneWorkMomentReq.ProtoReflect.Descriptor instead.
func (*CommentOneWorkMomentReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{30}
}

func (x *CommentOneWorkMomentReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CommentOneWorkMomentReq) GetWorkMomentID() string {
	if x != nil {
		return x.WorkMomentID
	}
	return ""
}

func (x *CommentOneWorkMomentReq) GetReplyUserID() string {
	if x != nil {
		return x.ReplyUserID
	}
	return ""
}

func (x *CommentOneWorkMomentReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CommentOneWorkMomentReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type CommentOneWorkMomentResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommonResp    *CommonResp            `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommentOneWorkMomentResp) Reset() {
	*x = CommentOneWorkMomentResp{}
	mi := &file_office_office_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommentOneWorkMomentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentOneWorkMomentResp) ProtoMessage() {}

func (x *CommentOneWorkMomentResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentOneWorkMomentResp.ProtoReflect.Descriptor instead.
func (*CommentOneWorkMomentResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{31}
}

func (x *CommentOneWorkMomentResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type DeleteCommentReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkMomentID  string                 `protobuf:"bytes,1,opt,name=workMomentID,proto3" json:"workMomentID"`
	ContentID     string                 `protobuf:"bytes,2,opt,name=contentID,proto3" json:"contentID"`
	OpUserID      string                 `protobuf:"bytes,3,opt,name=opUserID,proto3" json:"opUserID"`
	OperationID   string                 `protobuf:"bytes,4,opt,name=operationID,proto3" json:"operationID"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCommentReq) Reset() {
	*x = DeleteCommentReq{}
	mi := &file_office_office_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommentReq) ProtoMessage() {}

func (x *DeleteCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommentReq.ProtoReflect.Descriptor instead.
func (*DeleteCommentReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{32}
}

func (x *DeleteCommentReq) GetWorkMomentID() string {
	if x != nil {
		return x.WorkMomentID
	}
	return ""
}

func (x *DeleteCommentReq) GetContentID() string {
	if x != nil {
		return x.ContentID
	}
	return ""
}

func (x *DeleteCommentReq) GetOpUserID() string {
	if x != nil {
		return x.OpUserID
	}
	return ""
}

func (x *DeleteCommentReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type DeleteCommentResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommonResp    *CommonResp            `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCommentResp) Reset() {
	*x = DeleteCommentResp{}
	mi := &file_office_office_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCommentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommentResp) ProtoMessage() {}

func (x *DeleteCommentResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommentResp.ProtoReflect.Descriptor instead.
func (*DeleteCommentResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{33}
}

func (x *DeleteCommentResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type GetWorkMomentByIDReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkMomentID  string                 `protobuf:"bytes,1,opt,name=workMomentID,proto3" json:"workMomentID"`
	OpUserID      string                 `protobuf:"bytes,2,opt,name=opUserID,proto3" json:"opUserID"`
	OperationID   string                 `protobuf:"bytes,3,opt,name=operationID,proto3" json:"operationID"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWorkMomentByIDReq) Reset() {
	*x = GetWorkMomentByIDReq{}
	mi := &file_office_office_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWorkMomentByIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkMomentByIDReq) ProtoMessage() {}

func (x *GetWorkMomentByIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkMomentByIDReq.ProtoReflect.Descriptor instead.
func (*GetWorkMomentByIDReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{34}
}

func (x *GetWorkMomentByIDReq) GetWorkMomentID() string {
	if x != nil {
		return x.WorkMomentID
	}
	return ""
}

func (x *GetWorkMomentByIDReq) GetOpUserID() string {
	if x != nil {
		return x.OpUserID
	}
	return ""
}

func (x *GetWorkMomentByIDReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type GetWorkMomentByIDResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommonResp    *CommonResp            `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	WorkMoment    *WorkMoment            `protobuf:"bytes,2,opt,name=workMoment,proto3" json:"workMoment"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWorkMomentByIDResp) Reset() {
	*x = GetWorkMomentByIDResp{}
	mi := &file_office_office_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWorkMomentByIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkMomentByIDResp) ProtoMessage() {}

func (x *GetWorkMomentByIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkMomentByIDResp.ProtoReflect.Descriptor instead.
func (*GetWorkMomentByIDResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{35}
}

func (x *GetWorkMomentByIDResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetWorkMomentByIDResp) GetWorkMoment() *WorkMoment {
	if x != nil {
		return x.WorkMoment
	}
	return nil
}

type ChangeWorkMomentPermissionReq struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	WorkMomentID         string                 `protobuf:"bytes,1,opt,name=workMomentID,proto3" json:"workMomentID"`
	OpUserID             string                 `protobuf:"bytes,2,opt,name=opUserID,proto3" json:"opUserID"`
	Permission           int32                  `protobuf:"varint,3,opt,name=permission,proto3" json:"permission"`
	PermissionUserIDList []string               `protobuf:"bytes,4,rep,name=permissionUserIDList,proto3" json:"permissionUserIDList"`
	OperationID          string                 `protobuf:"bytes,5,opt,name=operationID,proto3" json:"operationID"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ChangeWorkMomentPermissionReq) Reset() {
	*x = ChangeWorkMomentPermissionReq{}
	mi := &file_office_office_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeWorkMomentPermissionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeWorkMomentPermissionReq) ProtoMessage() {}

func (x *ChangeWorkMomentPermissionReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeWorkMomentPermissionReq.ProtoReflect.Descriptor instead.
func (*ChangeWorkMomentPermissionReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{36}
}

func (x *ChangeWorkMomentPermissionReq) GetWorkMomentID() string {
	if x != nil {
		return x.WorkMomentID
	}
	return ""
}

func (x *ChangeWorkMomentPermissionReq) GetOpUserID() string {
	if x != nil {
		return x.OpUserID
	}
	return ""
}

func (x *ChangeWorkMomentPermissionReq) GetPermission() int32 {
	if x != nil {
		return x.Permission
	}
	return 0
}

func (x *ChangeWorkMomentPermissionReq) GetPermissionUserIDList() []string {
	if x != nil {
		return x.PermissionUserIDList
	}
	return nil
}

func (x *ChangeWorkMomentPermissionReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type ChangeWorkMomentPermissionResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommonResp    *CommonResp            `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeWorkMomentPermissionResp) Reset() {
	*x = ChangeWorkMomentPermissionResp{}
	mi := &file_office_office_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeWorkMomentPermissionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeWorkMomentPermissionResp) ProtoMessage() {}

func (x *ChangeWorkMomentPermissionResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeWorkMomentPermissionResp.ProtoReflect.Descriptor instead.
func (*ChangeWorkMomentPermissionResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{37}
}

func (x *ChangeWorkMomentPermissionResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type GetUserWorkMomentsReq struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	UserID        string                   `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	OpUserID      string                   `protobuf:"bytes,2,opt,name=opUserID,proto3" json:"opUserID"`
	Pagination    *sdkws.RequestPagination `protobuf:"bytes,3,opt,name=Pagination,proto3" json:"Pagination"`
	OperationID   string                   `protobuf:"bytes,4,opt,name=operationID,proto3" json:"operationID"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserWorkMomentsReq) Reset() {
	*x = GetUserWorkMomentsReq{}
	mi := &file_office_office_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserWorkMomentsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserWorkMomentsReq) ProtoMessage() {}

func (x *GetUserWorkMomentsReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserWorkMomentsReq.ProtoReflect.Descriptor instead.
func (*GetUserWorkMomentsReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{38}
}

func (x *GetUserWorkMomentsReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetUserWorkMomentsReq) GetOpUserID() string {
	if x != nil {
		return x.OpUserID
	}
	return ""
}

func (x *GetUserWorkMomentsReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetUserWorkMomentsReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type GetUserWorkMomentsResp struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	CommonResp    *CommonResp               `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	WorkMoments   []*WorkMoment             `protobuf:"bytes,2,rep,name=workMoments,proto3" json:"workMoments"`
	Pagination    *sdkws.ResponsePagination `protobuf:"bytes,3,opt,name=Pagination,proto3" json:"Pagination"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserWorkMomentsResp) Reset() {
	*x = GetUserWorkMomentsResp{}
	mi := &file_office_office_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserWorkMomentsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserWorkMomentsResp) ProtoMessage() {}

func (x *GetUserWorkMomentsResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserWorkMomentsResp.ProtoReflect.Descriptor instead.
func (*GetUserWorkMomentsResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{39}
}

func (x *GetUserWorkMomentsResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetUserWorkMomentsResp) GetWorkMoments() []*WorkMoment {
	if x != nil {
		return x.WorkMoments
	}
	return nil
}

func (x *GetUserWorkMomentsResp) GetPagination() *sdkws.ResponsePagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetUserFriendWorkMomentsReq struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	UserID        string                   `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Pagination    *sdkws.RequestPagination `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination"`
	OperationID   string                   `protobuf:"bytes,3,opt,name=operationID,proto3" json:"operationID"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserFriendWorkMomentsReq) Reset() {
	*x = GetUserFriendWorkMomentsReq{}
	mi := &file_office_office_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserFriendWorkMomentsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserFriendWorkMomentsReq) ProtoMessage() {}

func (x *GetUserFriendWorkMomentsReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserFriendWorkMomentsReq.ProtoReflect.Descriptor instead.
func (*GetUserFriendWorkMomentsReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{40}
}

func (x *GetUserFriendWorkMomentsReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetUserFriendWorkMomentsReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetUserFriendWorkMomentsReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type GetUserFriendWorkMomentsResp struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	CommonResp    *CommonResp               `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	WorkMoments   []*WorkMoment             `protobuf:"bytes,2,rep,name=workMoments,proto3" json:"workMoments"`
	Pagination    *sdkws.ResponsePagination `protobuf:"bytes,3,opt,name=Pagination,proto3" json:"Pagination"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserFriendWorkMomentsResp) Reset() {
	*x = GetUserFriendWorkMomentsResp{}
	mi := &file_office_office_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserFriendWorkMomentsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserFriendWorkMomentsResp) ProtoMessage() {}

func (x *GetUserFriendWorkMomentsResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserFriendWorkMomentsResp.ProtoReflect.Descriptor instead.
func (*GetUserFriendWorkMomentsResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{41}
}

func (x *GetUserFriendWorkMomentsResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetUserFriendWorkMomentsResp) GetWorkMoments() []*WorkMoment {
	if x != nil {
		return x.WorkMoments
	}
	return nil
}

func (x *GetUserFriendWorkMomentsResp) GetPagination() *sdkws.ResponsePagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type WorkMomentNotificationMsg struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	NotificationMsgType int32                  `protobuf:"varint,1,opt,name=notificationMsgType,proto3" json:"notificationMsgType"`
	ReplyUserName       string                 `protobuf:"bytes,2,opt,name=replyUserName,proto3" json:"replyUserName"`
	ReplyUserID         string                 `protobuf:"bytes,3,opt,name=replyUserID,proto3" json:"replyUserID"`
	Content             string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content"`
	ContentID           string                 `protobuf:"bytes,5,opt,name=contentID,proto3" json:"contentID"`
	WorkMomentID        string                 `protobuf:"bytes,6,opt,name=workMomentID,proto3" json:"workMomentID"`
	UserID              string                 `protobuf:"bytes,7,opt,name=userID,proto3" json:"userID"`
	UserName            string                 `protobuf:"bytes,8,opt,name=userName,proto3" json:"userName"`
	FaceURL             string                 `protobuf:"bytes,9,opt,name=faceURL,proto3" json:"faceURL"`
	WorkMomentContent   string                 `protobuf:"bytes,10,opt,name=workMomentContent,proto3" json:"workMomentContent"`
	CreateTime          int32                  `protobuf:"varint,11,opt,name=createTime,proto3" json:"createTime"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *WorkMomentNotificationMsg) Reset() {
	*x = WorkMomentNotificationMsg{}
	mi := &file_office_office_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkMomentNotificationMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkMomentNotificationMsg) ProtoMessage() {}

func (x *WorkMomentNotificationMsg) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkMomentNotificationMsg.ProtoReflect.Descriptor instead.
func (*WorkMomentNotificationMsg) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{42}
}

func (x *WorkMomentNotificationMsg) GetNotificationMsgType() int32 {
	if x != nil {
		return x.NotificationMsgType
	}
	return 0
}

func (x *WorkMomentNotificationMsg) GetReplyUserName() string {
	if x != nil {
		return x.ReplyUserName
	}
	return ""
}

func (x *WorkMomentNotificationMsg) GetReplyUserID() string {
	if x != nil {
		return x.ReplyUserID
	}
	return ""
}

func (x *WorkMomentNotificationMsg) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *WorkMomentNotificationMsg) GetContentID() string {
	if x != nil {
		return x.ContentID
	}
	return ""
}

func (x *WorkMomentNotificationMsg) GetWorkMomentID() string {
	if x != nil {
		return x.WorkMomentID
	}
	return ""
}

func (x *WorkMomentNotificationMsg) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *WorkMomentNotificationMsg) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *WorkMomentNotificationMsg) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *WorkMomentNotificationMsg) GetWorkMomentContent() string {
	if x != nil {
		return x.WorkMomentContent
	}
	return ""
}

func (x *WorkMomentNotificationMsg) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type SetUserWorkMomentsLevelReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Level         int32                  `protobuf:"varint,2,opt,name=level,proto3" json:"level"`
	OperationID   string                 `protobuf:"bytes,3,opt,name=operationID,proto3" json:"operationID"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetUserWorkMomentsLevelReq) Reset() {
	*x = SetUserWorkMomentsLevelReq{}
	mi := &file_office_office_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetUserWorkMomentsLevelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserWorkMomentsLevelReq) ProtoMessage() {}

func (x *SetUserWorkMomentsLevelReq) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserWorkMomentsLevelReq.ProtoReflect.Descriptor instead.
func (*SetUserWorkMomentsLevelReq) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{43}
}

func (x *SetUserWorkMomentsLevelReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *SetUserWorkMomentsLevelReq) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *SetUserWorkMomentsLevelReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type SetUserWorkMomentsLevelResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommonResp    *CommonResp            `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetUserWorkMomentsLevelResp) Reset() {
	*x = SetUserWorkMomentsLevelResp{}
	mi := &file_office_office_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetUserWorkMomentsLevelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserWorkMomentsLevelResp) ProtoMessage() {}

func (x *SetUserWorkMomentsLevelResp) ProtoReflect() protoreflect.Message {
	mi := &file_office_office_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserWorkMomentsLevelResp.ProtoReflect.Descriptor instead.
func (*SetUserWorkMomentsLevelResp) Descriptor() ([]byte, []int) {
	return file_office_office_proto_rawDescGZIP(), []int{44}
}

func (x *SetUserWorkMomentsLevelResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

var File_office_office_proto protoreflect.FileDescriptor

var file_office_office_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x1a, 0x11, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2f, 0x73, 0x64, 0x6b, 0x77,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x3d, 0x0a, 0x07, 0x54, 0x61, 0x67, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x69, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x61, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61,
	0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e,
	0x54, 0x61, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x4a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x74, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x67, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x4a, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x5e, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61,
	0x67, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x61, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x22, 0x4a, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x22, 0xd1, 0x01, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x22, 0x47, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xe4, 0x01,
	0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x32, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x22, 0x4c, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x32,
	0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x8e, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x53, 0x65, 0x6e,
	0x64, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x12, 0x3f, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x22, 0x76, 0x0a, 0x0a, 0x54, 0x61, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f,
	0x67, 0x12, 0x32, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66,
	0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x0a, 0x0b, 0x74, 0x61, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x52,
	0x0b, 0x74, 0x61, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x22, 0x63, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x22, 0x75, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x42,
	0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x24, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e,
	0x54, 0x61, 0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x3e, 0x0a, 0x08, 0x4c, 0x69, 0x6b, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x10, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xf7, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x49, 0x0a, 0x0f, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x22, 0x44, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xaf, 0x04, 0x0a, 0x0a,
	0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x6f,
	0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x6c, 0x69, 0x6b, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0c, 0x6c, 0x69, 0x6b,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x12, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x13,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x13, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d,
	0x0a, 0x0a, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69,
	0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x0a, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x75, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x39, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x4d,
	0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x22, 0x54, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x76, 0x0a, 0x16, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b,
	0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x22, 0x54, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x74, 0x0a, 0x14, 0x4c, 0x69, 0x6b, 0x65,
	0x4f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b,
	0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x52,
	0x0a, 0x15, 0x4c, 0x69, 0x6b, 0x65, 0x4f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x22, 0xb3, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x6e,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f,
	0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x55, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x92, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b,
	0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x22, 0x4e, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x78, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x4d,
	0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c,
	0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x8d,
	0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xd5,
	0x01, 0x0a, 0x1d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x22, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x32, 0x0a, 0x14, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x5b, 0x0a, 0x1e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x22, 0xae, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x57,
	0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x3f, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73,
	0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x22, 0xd2, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x0b, 0x77, 0x6f,
	0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b,
	0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x98, 0x01, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x4d,
	0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x3f, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73,
	0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x22, 0xd8, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x3b, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x8d, 0x03, 0x0a, 0x19, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x30, 0x0a,
	0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55,
	0x52, 0x4c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52,
	0x4c, 0x12, 0x2c, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x6f,
	0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x6c, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x58, 0x0a,
	0x1b, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x32, 0xb6, 0x0c, 0x0a, 0x0d, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x67, 0x12, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x46, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x1b, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x54, 0x61,
	0x67, 0x12, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x54,
	0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73,
	0x67, 0x32, 0x54, 0x61, 0x67, 0x12, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x32, 0x54, 0x61,
	0x67, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x32, 0x54, 0x61, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x55, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x53, 0x65,
	0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x53, 0x65, 0x6e,
	0x64, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x53,
	0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x55, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x42, 0x79, 0x49, 0x44, 0x12, 0x20, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a,
	0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x64, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x64, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5e,
	0x0a, 0x11, 0x4c, 0x69, 0x6b, 0x65, 0x4f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66,
	0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x4f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d,
	0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x4f, 0x6e, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x67,
	0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x6e,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x27,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x52, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5e, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x44,
	0x12, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x79, 0x0a, 0x1a, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x73, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x57,
	0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x70,
	0x0a, 0x17, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b,
	0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x42, 0x26, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_office_office_proto_rawDescOnce sync.Once
	file_office_office_proto_rawDescData = file_office_office_proto_rawDesc
)

func file_office_office_proto_rawDescGZIP() []byte {
	file_office_office_proto_rawDescOnce.Do(func() {
		file_office_office_proto_rawDescData = protoimpl.X.CompressGZIP(file_office_office_proto_rawDescData)
	})
	return file_office_office_proto_rawDescData
}

var file_office_office_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_office_office_proto_goTypes = []any{
	(*CommonResp)(nil),                     // 0: openim.office.CommonResp
	(*TagUser)(nil),                        // 1: openim.office.TagUser
	(*Tag)(nil),                            // 2: openim.office.Tag
	(*GetUserTagsReq)(nil),                 // 3: openim.office.GetUserTagsReq
	(*GetUserTagsResp)(nil),                // 4: openim.office.GetUserTagsResp
	(*CreateTagReq)(nil),                   // 5: openim.office.CreateTagReq
	(*CreateTagResp)(nil),                  // 6: openim.office.CreateTagResp
	(*DeleteTagReq)(nil),                   // 7: openim.office.DeleteTagReq
	(*DeleteTagResp)(nil),                  // 8: openim.office.DeleteTagResp
	(*SetTagReq)(nil),                      // 9: openim.office.SetTagReq
	(*SetTagResp)(nil),                     // 10: openim.office.SetTagResp
	(*SendMsg2TagReq)(nil),                 // 11: openim.office.SendMsg2TagReq
	(*SendMsg2TagResp)(nil),                // 12: openim.office.SendMsg2TagResp
	(*GetTagSendLogsReq)(nil),              // 13: openim.office.GetTagSendLogsReq
	(*TagSendLog)(nil),                     // 14: openim.office.TagSendLog
	(*GetTagSendLogsResp)(nil),             // 15: openim.office.GetTagSendLogsResp
	(*GetUserTagByIDReq)(nil),              // 16: openim.office.GetUserTagByIDReq
	(*GetUserTagByIDResp)(nil),             // 17: openim.office.GetUserTagByIDResp
	(*LikeUser)(nil),                       // 18: openim.office.LikeUser
	(*NotificationUser)(nil),               // 19: openim.office.NotificationUser
	(*Comment)(nil),                        // 20: openim.office.Comment
	(*PermissionGroup)(nil),                // 21: openim.office.PermissionGroup
	(*WorkMomentUser)(nil),                 // 22: openim.office.WorkMomentUser
	(*WorkMoment)(nil),                     // 23: openim.office.WorkMoment
	(*CreateOneWorkMomentReq)(nil),         // 24: openim.office.CreateOneWorkMomentReq
	(*CreateOneWorkMomentResp)(nil),        // 25: openim.office.CreateOneWorkMomentResp
	(*DeleteOneWorkMomentReq)(nil),         // 26: openim.office.DeleteOneWorkMomentReq
	(*DeleteOneWorkMomentResp)(nil),        // 27: openim.office.DeleteOneWorkMomentResp
	(*LikeOneWorkMomentReq)(nil),           // 28: openim.office.LikeOneWorkMomentReq
	(*LikeOneWorkMomentResp)(nil),          // 29: openim.office.LikeOneWorkMomentResp
	(*CommentOneWorkMomentReq)(nil),        // 30: openim.office.CommentOneWorkMomentReq
	(*CommentOneWorkMomentResp)(nil),       // 31: openim.office.CommentOneWorkMomentResp
	(*DeleteCommentReq)(nil),               // 32: openim.office.DeleteCommentReq
	(*DeleteCommentResp)(nil),              // 33: openim.office.DeleteCommentResp
	(*GetWorkMomentByIDReq)(nil),           // 34: openim.office.GetWorkMomentByIDReq
	(*GetWorkMomentByIDResp)(nil),          // 35: openim.office.GetWorkMomentByIDResp
	(*ChangeWorkMomentPermissionReq)(nil),  // 36: openim.office.ChangeWorkMomentPermissionReq
	(*ChangeWorkMomentPermissionResp)(nil), // 37: openim.office.ChangeWorkMomentPermissionResp
	(*GetUserWorkMomentsReq)(nil),          // 38: openim.office.GetUserWorkMomentsReq
	(*GetUserWorkMomentsResp)(nil),         // 39: openim.office.GetUserWorkMomentsResp
	(*GetUserFriendWorkMomentsReq)(nil),    // 40: openim.office.GetUserFriendWorkMomentsReq
	(*GetUserFriendWorkMomentsResp)(nil),   // 41: openim.office.GetUserFriendWorkMomentsResp
	(*WorkMomentNotificationMsg)(nil),      // 42: openim.office.WorkMomentNotificationMsg
	(*SetUserWorkMomentsLevelReq)(nil),     // 43: openim.office.SetUserWorkMomentsLevelReq
	(*SetUserWorkMomentsLevelResp)(nil),    // 44: openim.office.SetUserWorkMomentsLevelResp
	(*sdkws.RequestPagination)(nil),        // 45: openim.sdkws.RequestPagination
	(*sdkws.ResponsePagination)(nil),       // 46: openim.sdkws.ResponsePagination
}
var file_office_office_proto_depIdxs = []int32{
	1,  // 0: openim.office.Tag.userList:type_name -> openim.office.TagUser
	0,  // 1: openim.office.GetUserTagsResp.commonResp:type_name -> openim.office.CommonResp
	2,  // 2: openim.office.GetUserTagsResp.tags:type_name -> openim.office.Tag
	0,  // 3: openim.office.CreateTagResp.commonResp:type_name -> openim.office.CommonResp
	0,  // 4: openim.office.DeleteTagResp.commonResp:type_name -> openim.office.CommonResp
	0,  // 5: openim.office.SetTagResp.commonResp:type_name -> openim.office.CommonResp
	0,  // 6: openim.office.SendMsg2TagResp.commonResp:type_name -> openim.office.CommonResp
	45, // 7: openim.office.GetTagSendLogsReq.Pagination:type_name -> openim.sdkws.RequestPagination
	1,  // 8: openim.office.TagSendLog.userList:type_name -> openim.office.TagUser
	0,  // 9: openim.office.GetTagSendLogsResp.commonResp:type_name -> openim.office.CommonResp
	46, // 10: openim.office.GetTagSendLogsResp.Pagination:type_name -> openim.sdkws.ResponsePagination
	14, // 11: openim.office.GetTagSendLogsResp.tagSendLogs:type_name -> openim.office.TagSendLog
	0,  // 12: openim.office.GetUserTagByIDResp.commonResp:type_name -> openim.office.CommonResp
	2,  // 13: openim.office.GetUserTagByIDResp.tag:type_name -> openim.office.Tag
	22, // 14: openim.office.WorkMoment.likeUserList:type_name -> openim.office.WorkMomentUser
	20, // 15: openim.office.WorkMoment.comments:type_name -> openim.office.Comment
	22, // 16: openim.office.WorkMoment.permissionUserList:type_name -> openim.office.WorkMomentUser
	21, // 17: openim.office.WorkMoment.permissionGroupList:type_name -> openim.office.PermissionGroup
	22, // 18: openim.office.WorkMoment.atUserList:type_name -> openim.office.WorkMomentUser
	23, // 19: openim.office.CreateOneWorkMomentReq.workMoment:type_name -> openim.office.WorkMoment
	0,  // 20: openim.office.CreateOneWorkMomentResp.commonResp:type_name -> openim.office.CommonResp
	0,  // 21: openim.office.DeleteOneWorkMomentResp.commonResp:type_name -> openim.office.CommonResp
	0,  // 22: openim.office.LikeOneWorkMomentResp.commonResp:type_name -> openim.office.CommonResp
	0,  // 23: openim.office.CommentOneWorkMomentResp.commonResp:type_name -> openim.office.CommonResp
	0,  // 24: openim.office.DeleteCommentResp.commonResp:type_name -> openim.office.CommonResp
	0,  // 25: openim.office.GetWorkMomentByIDResp.commonResp:type_name -> openim.office.CommonResp
	23, // 26: openim.office.GetWorkMomentByIDResp.workMoment:type_name -> openim.office.WorkMoment
	0,  // 27: openim.office.ChangeWorkMomentPermissionResp.commonResp:type_name -> openim.office.CommonResp
	45, // 28: openim.office.GetUserWorkMomentsReq.Pagination:type_name -> openim.sdkws.RequestPagination
	0,  // 29: openim.office.GetUserWorkMomentsResp.commonResp:type_name -> openim.office.CommonResp
	23, // 30: openim.office.GetUserWorkMomentsResp.workMoments:type_name -> openim.office.WorkMoment
	46, // 31: openim.office.GetUserWorkMomentsResp.Pagination:type_name -> openim.sdkws.ResponsePagination
	45, // 32: openim.office.GetUserFriendWorkMomentsReq.Pagination:type_name -> openim.sdkws.RequestPagination
	0,  // 33: openim.office.GetUserFriendWorkMomentsResp.commonResp:type_name -> openim.office.CommonResp
	23, // 34: openim.office.GetUserFriendWorkMomentsResp.workMoments:type_name -> openim.office.WorkMoment
	46, // 35: openim.office.GetUserFriendWorkMomentsResp.Pagination:type_name -> openim.sdkws.ResponsePagination
	0,  // 36: openim.office.SetUserWorkMomentsLevelResp.commonResp:type_name -> openim.office.CommonResp
	3,  // 37: openim.office.OfficeService.GetUserTags:input_type -> openim.office.GetUserTagsReq
	5,  // 38: openim.office.OfficeService.CreateTag:input_type -> openim.office.CreateTagReq
	7,  // 39: openim.office.OfficeService.DeleteTag:input_type -> openim.office.DeleteTagReq
	9,  // 40: openim.office.OfficeService.SetTag:input_type -> openim.office.SetTagReq
	11, // 41: openim.office.OfficeService.SendMsg2Tag:input_type -> openim.office.SendMsg2TagReq
	13, // 42: openim.office.OfficeService.GetTagSendLogs:input_type -> openim.office.GetTagSendLogsReq
	16, // 43: openim.office.OfficeService.GetUserTagByID:input_type -> openim.office.GetUserTagByIDReq
	24, // 44: openim.office.OfficeService.CreateOneWorkMoment:input_type -> openim.office.CreateOneWorkMomentReq
	26, // 45: openim.office.OfficeService.DeleteOneWorkMoment:input_type -> openim.office.DeleteOneWorkMomentReq
	28, // 46: openim.office.OfficeService.LikeOneWorkMoment:input_type -> openim.office.LikeOneWorkMomentReq
	30, // 47: openim.office.OfficeService.CommentOneWorkMoment:input_type -> openim.office.CommentOneWorkMomentReq
	32, // 48: openim.office.OfficeService.DeleteComment:input_type -> openim.office.DeleteCommentReq
	34, // 49: openim.office.OfficeService.GetWorkMomentByID:input_type -> openim.office.GetWorkMomentByIDReq
	36, // 50: openim.office.OfficeService.ChangeWorkMomentPermission:input_type -> openim.office.ChangeWorkMomentPermissionReq
	38, // 51: openim.office.OfficeService.GetUserWorkMoments:input_type -> openim.office.GetUserWorkMomentsReq
	40, // 52: openim.office.OfficeService.GetUserFriendWorkMoments:input_type -> openim.office.GetUserFriendWorkMomentsReq
	43, // 53: openim.office.OfficeService.SetUserWorkMomentsLevel:input_type -> openim.office.SetUserWorkMomentsLevelReq
	4,  // 54: openim.office.OfficeService.GetUserTags:output_type -> openim.office.GetUserTagsResp
	6,  // 55: openim.office.OfficeService.CreateTag:output_type -> openim.office.CreateTagResp
	8,  // 56: openim.office.OfficeService.DeleteTag:output_type -> openim.office.DeleteTagResp
	10, // 57: openim.office.OfficeService.SetTag:output_type -> openim.office.SetTagResp
	12, // 58: openim.office.OfficeService.SendMsg2Tag:output_type -> openim.office.SendMsg2TagResp
	15, // 59: openim.office.OfficeService.GetTagSendLogs:output_type -> openim.office.GetTagSendLogsResp
	17, // 60: openim.office.OfficeService.GetUserTagByID:output_type -> openim.office.GetUserTagByIDResp
	25, // 61: openim.office.OfficeService.CreateOneWorkMoment:output_type -> openim.office.CreateOneWorkMomentResp
	27, // 62: openim.office.OfficeService.DeleteOneWorkMoment:output_type -> openim.office.DeleteOneWorkMomentResp
	29, // 63: openim.office.OfficeService.LikeOneWorkMoment:output_type -> openim.office.LikeOneWorkMomentResp
	31, // 64: openim.office.OfficeService.CommentOneWorkMoment:output_type -> openim.office.CommentOneWorkMomentResp
	33, // 65: openim.office.OfficeService.DeleteComment:output_type -> openim.office.DeleteCommentResp
	35, // 66: openim.office.OfficeService.GetWorkMomentByID:output_type -> openim.office.GetWorkMomentByIDResp
	37, // 67: openim.office.OfficeService.ChangeWorkMomentPermission:output_type -> openim.office.ChangeWorkMomentPermissionResp
	39, // 68: openim.office.OfficeService.GetUserWorkMoments:output_type -> openim.office.GetUserWorkMomentsResp
	41, // 69: openim.office.OfficeService.GetUserFriendWorkMoments:output_type -> openim.office.GetUserFriendWorkMomentsResp
	44, // 70: openim.office.OfficeService.SetUserWorkMomentsLevel:output_type -> openim.office.SetUserWorkMomentsLevelResp
	54, // [54:71] is the sub-list for method output_type
	37, // [37:54] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_office_office_proto_init() }
func file_office_office_proto_init() {
	if File_office_office_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_office_office_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_office_office_proto_goTypes,
		DependencyIndexes: file_office_office_proto_depIdxs,
		MessageInfos:      file_office_office_proto_msgTypes,
	}.Build()
	File_office_office_proto = out.File
	file_office_office_proto_rawDesc = nil
	file_office_office_proto_goTypes = nil
	file_office_office_proto_depIdxs = nil
}
